import streamlit as st
import pandas as pd
import numpy as np

st.title("Modelo DuPont - An√°lisis de Rentabilidad")

st.markdown("""
Sube tu archivo con los siguientes campos m√≠nimos por per√≠odo:

- `Periodo`
- `Utilidad Neta`
- `Ventas Netas`
- `Activos Totales`
- `Capital Contable`

El reporte se generar√° autom√°ticamente por per√≠odo.
""")

uploaded_file = st.file_uploader("Carga un archivo .csv o .xlsx", type=["csv", "xlsx"])

if uploaded_file:
    # Leer archivo
    if uploaded_file.name.endswith(".csv"):
        df = pd.read_csv(uploaded_file)
    else:
        df = pd.read_excel(uploaded_file)

    # Validaci√≥n de columnas m√≠nimas
    required_columns = ["Periodo", "Utilidad Neta", "Ventas Netas", "Activos Totales", "Capital Contable"]
    if not all(col in df.columns for col in required_columns):
        st.error("‚ö†Ô∏è El archivo no contiene todas las columnas requeridas.")
    else:
        # Agrupaci√≥n por per√≠odo (por si hay m√°s de una fila por per√≠odo)
        df_grouped = df.groupby("Periodo").sum().reset_index()

        # C√°lculo de indicadores DuPont
        df_grouped["Margen Neto (%)"] = df_grouped["Utilidad Neta"] / df_grouped["Ventas Netas"] * 100
        df_grouped["Rotaci√≥n (veces)"] = df_grouped["Ventas Netas"] / df_grouped["Activos Totales"]
        df_grouped["Apalancamiento (veces)"] = df_grouped["Activos Totales"] / df_grouped["Capital Contable"]
        df_grouped["ROE (%)"] = df_grouped["Margen Neto (%)"] * df_grouped["Rotaci√≥n (veces)"]
        df_grouped["ROA (%)"] = df_grouped["Rotaci√≥n (veces)"] * df_grouped["Apalancamiento (veces)"]
        df_grouped["Pay Back Capital (veces)"] = 1 / (df_grouped["ROE (%)"] / 100)
        df_grouped["Pay Back Activos (veces)"] = 1 / (df_grouped["ROA (%)"] / 100)

        # Redondear seg√∫n tipo de indicador
        tabla = df_grouped.set_index("Periodo")[[
            "Margen Neto (%)", "ROE (%)", "ROA (%)",        # Relativos
            "Rotaci√≥n (veces)", "Apalancamiento (veces)",   # Absolutos
            "Pay Back Capital (veces)", "Pay Back Activos (veces)"
        ]].T

        # Redondeo: relativos con 1 decimal, absolutos con 1 decimal
        tabla.loc[["Margen Neto (%)", "ROE (%)", "ROA (%)"]] = tabla.loc[[
            "Margen Neto (%)", "ROE (%)", "ROA (%)"]].applymap(lambda x: round(x, 1))
        tabla.loc[["Rotaci√≥n (veces)", "Apalancamiento (veces)", "Pay Back Capital (veces)", "Pay Back Activos (veces)"]] = tabla.loc[[
            "Rotaci√≥n (veces)", "Apalancamiento (veces)", "Pay Back Capital (veces)", "Pay Back Activos (veces)"]].applymap(lambda x: round(x, 1))

        st.success("‚úÖ An√°lisis generado correctamente")
        st.dataframe(tabla)

        # Bot√≥n para descargar Excel
        output = tabla.reset_index()
        output.columns = ["Concepto"] + list(output.columns[1:])
        excel_output = output.to_excel(index=False, engine='openpyxl')

        st.download_button("üì• Descargar reporte Excel", data=excel_output, file_name="reporte_dupont.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
